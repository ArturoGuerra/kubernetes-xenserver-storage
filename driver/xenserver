#!/bin/bash

JQ="/usr/libexec/kubernetes/kubelet-plugins/volume/exec/spangenberg.io~xenserver/jq"
LOG_FILE="/tmp/xenserver-driver.log"

debug() {
	echo "$*" >> ${LOG_FILE} 2>&1
}

err() {
	echo "$*" 1>&2
}

log() {
	echo "$*" >&1
}

failure() {
	err "{\"status\": \"Failure\", \"message\": \"$*\"}"
	exit 1
}

success() {
	debug "success"
	log '{"status": "Success"}'
	exit 0
}

init() {
	log '{"status": "Success", "capabilities": {"attach": false}}'
	exit 0
}

domount() {
	mount_dir=${1}
	debug "mount_dir=${mount_dir}"
	json_options=${2}
	debug "json_options=${json_options}"

	fs_type=$(echo "${json_options}" | ${JQ} -r '.["kubernetes.io/fsType"]')
	if [[ -z "${fs_type}" ]]; then
		fs_type="ext4"
	fi

	vdi_name_label=$(echo "${json_options}" | ${JQ} -r '.["kubernetes.io/pvOrVolumeName"]')
	xenserver_password=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/password"]')
	xenserver_username=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/username"]')
	xenserver_host=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/host"]')

	mac=$(cat /sys/class/net/eth0/address 2>>${LOG_FILE})
	if [ $? -ne 0 ]; then
		failure "Could not get mac address"
	fi

	vm_uuid=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vif-list currently-attached=true MAC=${mac} params=vm-uuid --minimal)
	if [ $? -ne 0 ]; then
		failure "Could not list vif"
	fi
	if [[ -z "${vm_uuid}" ]]; then
		failure "Could not find VM with MAC ${mac}"
	fi

	vdi_uuid=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vdi-list is-a-snapshot=false name-label=${vdi_name_label} --minimal)
	if [ $? -ne 0 ]; then
		failure "Could not list vdi"
	fi
	if [[ -z "${vdi_uuid}" ]]; then
		failure "Could not find VDI"
	fi

	vbd_uuids=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-list vdi-uuid=${vdi_uuid} --minimal)
	if [ $? -ne 0 ]; then
		failure "Could not list vbds"
	fi
	if [[ -n "${vbd_uuids}" ]]; then
		OIFS=${IFS}; IFS=","; vbd_uuids=("${vbd_uuids}"); IFS=${OIFS}
		for vbd_uuid in "${vbd_uuids[@]}"; do
			currently_attached=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-list uuid=${vbd_uuid} params=currently-attached --minimal)
			if [ $? -ne 0 ]; then
				failure "Could not list vbd"
			fi
			if [ "${currently_attached}" = "true" ]; then
				xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-unplug uuid=${vbd_uuid} force=true
				if [ $? -ne 0 ]; then
					failure "Could not unplug vbd"
				fi
			fi

			xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-destroy uuid=${vbd_uuid}
			if [ $? -ne 0 ]; then
				failure "Could not destroy vbd"
			fi
		done
	fi

	vbd_uuid=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-create vm-uuid=${vm_uuid} vdi-uuid=${vdi_uuid} device=autodetect)
	if [ $? -ne 0 -o -z "${vbd_uuid}" ]; then
		failure "Could not create vbd"
	fi

	xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-plug uuid=${vbd_uuid}
	if [ $? -ne 0 ]; then
		failure "Could not plug vbd"
	fi

	device=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-param-get uuid=${vbd_uuid} param-name=device)
	if [ $? -ne 0 -o -z "${device}" ]; then
		failure "Could get vbd param"
	fi

	debug "blkid /dev/${device}"
	if [ -z "$(blkid "/dev/${device}" 2>>${LOG_FILE})" ]; then
		debug "mkfs -t ${fs_type} /dev/${device}"
		mkfs -t "${fs_type}" "/dev/${device}" >> ${LOG_FILE} 2>&1
		if [ $? -ne 0 ]; then
			failure "Failed to create fs ${fs_type} on device ${device}"
		fi
	fi

	debug "mkdir -p ${mount_dir}"
	mkdir -p "${mount_dir}" &>/dev/null

	debug "echo {...} > ${mount_dir}-json"
	echo "${json_options}" > "${mount_dir}-json"

	debug "mount /dev/${device} ${mount_dir}"
	mount "/dev/${device}" "${mount_dir}" >> ${LOG_FILE} 2>&1
	if [ $? -ne 0 ]; then
		failure "Could not mount ${device} at ${mount_dir}"
	fi

	success
}

dounmount() {
	mount_dir="$1"
	debug "mount_dir=${mount_dir}"

	json_options=$(cat "${mount_dir}-json")

	xenserver_password=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/password"]')
	xenserver_username=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/username"]')
	xenserver_host=$(echo "${json_options}" | ${JQ} -r '.["spangenberg.io/xenserver/host"]')

	mac=$(cat /sys/class/net/eth0/address)
	if [ $? -ne 0 ]; then
		failure "Could not get mac address"
	fi

	vm_uuid=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vif-list currently-attached=true params=vm-uuid MAC=${mac} --minimal)
	if [ $? -ne 0 ]; then
		failure	"Could not list vif"
	fi
	if [[ -z "${vm_uuid}" ]]; then
		failure "Could not find VM with MAC ${mac}"
	fi

	debug "findmnt -n -o SOURCE --target ${mount_dir} | cut -d/ -f3"
	device=$(findmnt -n -o SOURCE --target "${mount_dir}" 2>>${LOG_FILE} | cut -d/ -f3)
	if [ $? -ne 0 ]; then
		failure "Could not find mount of ${mount_dir}"
	fi

	if [ "${device}" != "mapper" ]; then
		vbd_uuid=$(xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-list currently-attached=true device=${device} vm-uuid=${vm_uuid} --minimal)
		if [ $? -ne 0 ]; then
			failure "Could not list vbd"
		fi
		if [[ -z "${vbd_uuid}" ]]; then
			failure "Could not find vbd"
		fi

		debug "umount ${mount_dir}"
		umount "${mount_dir}" >> ${LOG_FILE} 2>&1
		if [ $? -ne 0 ]; then
			failure "Could not unmount ${device} at ${mount_dir}"
		fi

		xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-unplug uuid=${vbd_uuid}
		if [ $? -ne 0 ]; then
			failure "Could not unplug vbd"
		fi

		xapi "${xenserver_host}" "${xenserver_username}" "${xenserver_password}" vbd-destroy uuid=${vbd_uuid}
		if [ $? -ne 0 ]; then
			failure "Could not destroy vbd"
		fi
	fi

	debug "rm -f ${mount_dir}-json"
	rm -f "${mount_dir}-json"

	success
}

xapi() {
	xenserver_host=$1
	xenserver_username=$2
	xenserver_password=$3
	command=$4

	shift 4

	debug "xe ${command} $*"

	docker run --rm spangenberg/xapi:latest "${command}" -s "${xenserver_host}" -u "${xenserver_username}" -pw "${xenserver_password}" $* 2>>${LOG_FILE}
}

debug "$*"

op=$1

shift

case ${op} in
	init)
		init $*
		;;
	mount)
		domount $*
		;;
	unmount)
		dounmount $*
		;;
	*)
		err '{"status": "Not supported"}'
		exit 1
		;;
esac
